import("types.nools");

// Some production rules for the Practical RST tutor


//--------------------------------------------------------------------------------------------
//
// Functions
//
//--------------------------------------------------------------------------------------------
//
// Initializing working memory
//
// This rule does not require further work from you.
//
//--------------------------------------------------------------------------------------------
rule bootstrap {
	when {
		b: Boolean b === true from true;
	}
	then {
		assert(new TPA("Relation1", "UpdateTextField", relation1.name));
		assert(new TPA("Definition1Text", "UpdateTextField", relation1.definition));
		assert(new TPA("Example1Text", "UpdateTextField", relation1.exampleS));
		assert(new TPA("Example1Text2", "UpdateTextField", relation1.exampleN));
		assert(new TPA("Conjunction1Phrase", "UpdateTextField", relation1.conjunctionPhrase));
		assert(new TPA("GroupText1", "UpdateTextField", relation1.group));
        
		assert(new TPA("Relation2", "UpdateTextField", relation2.name));
		assert(new TPA("Definition2Text", "UpdateTextField", relation2.definition));
		assert(new TPA("Example2Text", "UpdateTextField", relation2.exampleS));
		assert(new TPA("Example2Text2", "UpdateTextField", relation2.exampleN));
		assert(new TPA("Conjunction2Phrase", "UpdateTextField", relation2.conjunctionPhrase));	
		assert(new TPA("GroupText2", "UpdateTextField", relation2.group));
        
		assert(new TPA("Relation3", "UpdateTextField", relation3.name));
		assert(new TPA("Definition3Text", "UpdateTextField", relation3.definition));
		assert(new TPA("Example3Text", "UpdateTextField", relation3.exampleS));
		assert(new TPA("Example3Text2", "UpdateTextField", relation3.exampleN));
		assert(new TPA("Conjunction3Phrase", "UpdateTextField", relation3.conjunctionPhrase));	
		assert(new TPA("GroupText3", "UpdateTextField", relation3.group));
		
        
        assert(new TPA("id1", "setLabels", options1));	
        assert(new TPA("id2", "setLabels", options2));	
        assert(new TPA("id3", "setLabels", options4));	
        assert(new TPA("radio_button_1", "setText", "Nucleus-Satellite"));	
        assert(new TPA("radio_button_2", "setText", "Nucleus-Nucleus"));
        
        assert(new TPA("Sentence1.2", "UpdateTextField", Sentence1));
        assert(new TPA("Sentence2.2", "UpdateTextField", Sentence2));
        assert(new TPA("Sentence1", "UpdateTextField", Sentence1));
        assert(new TPA("Sentence2", "UpdateTextField", Sentence2));
        assert(new part3PotentialAnswer("rb1: Nucleus-Nucleus",2));
        assert(new part3PotentialAnswer("rb2: Nucleus-Satellite",1));
        assert(new interfaceElement("id1",1));
        assert(new interfaceElement("id2",2));
        assert(new interfaceElement("id3",4));

        assert(new problem(1));

        assert(new TPA("skills", "setVisible",true));
        
		setProblemAttribute("use_backtracking", true);
		setProblemAttribute("prune_old_activations", true);
		halt();
	}
}



// Step1
// IF there is a Step1 subgoal
//    AND we have not chosen the class/group yet
//  THEN
//     select from the dropdown menu a choice for step 1
//


rule Step1 {
	when {
		p: problem p.state == 1 {ie1index:theie}; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		console.log(sel);
		assert(new Hint("I don't know"));
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: part1answer})) {	
			console.log('here2');
            //modify(sel, "UpdateComboBox", part1answer);
            modify(p,'state',2);
            console.log('here3');
			halt();
		} else {
			backtrack();
		}
		
	}
}
rule Step2 {
	when {
		p: problem p.state == 2 {ie2index:theie}; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		console.log(sel);
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: part2answer})) {	
			console.log('here2');
			modify(p,'state',3);
			halt();
		} else {
			backtrack();
		}
	}
}

rule Step3 {
	when {
		p: problem p.state == 3 ; 
		correctAnswer : part3PotentialAnswer correctAnswer.type==part3answer {value : v};
	}
	then {
		console.log(v);
		if (checkSAI({selection: 'radio_button_group', action: "UpdateRadioButton", input: v})) {	
			console.log('here2');
			modify(p,'state',4);
			halt();
		} else {
			backtrack();
		}
	}
}

rule Step4 {
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: part4answer})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}

rule Motivation {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Motivation"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}

rule Restatement {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Restatement"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}

rule Sequence {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Sequence"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}

rule Cause {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Cause"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}

rule Condition {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Condition"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}

rule Contrast {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Contrast"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}


rule Conjunction {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Conjunction"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}

rule Evidence {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Evidence"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}

rule Summary {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Summary"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}


rule Background {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Background"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}


rule Evaluation {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Evaluation"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}


rule Joint {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Joint"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}

rule Elaboration {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Elaboration"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}

rule Interpretation {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Interpretation"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}

rule Preparation {
	salience: 10;
	when {
		p: problem p.state == 4 {ie4index:theie} ; 
		ie : interfaceElement ie.value==theie {name : sel};
	}
	then {
		if (checkSAI({selection: sel, action: "UpdateComboBox", input: "Preparation"})) {	
			console.log('here2');
			modify(p,'state',5);
			
			halt();
		} else {
			backtrack();
		}
	}
}

rule Done {
  when {
    p : problem p.state == 5; 
  }
  then {
    if(checkSAI({selection: "Done", action: "ButtonPressed", input: "don't_care"})) {
        //modify(p,"state", true);       // modify semantic
        halt();                 // await next student action
    }
  }
}

/**rule selectFirstStrain {
	when {
		prob: Problem prob.subgoal === "selectCross" && !prob.firstStrainCurCross && 
				prob.interfaceRows {interfaceRows: intRows};
		s: Strain {name: s1};
		exists(c: Cross s1 in c.strains);
		intRow: interfaceRow intRow.name === intRows[0] {iesStrains: intRowStrains};
		ie: interfaceElement !ie.value && ie.name in intRowStrains {name: selection};
	}
	then {
		if (checkSAI({selection: selection, action: "UpdateTextField", input: s1})) {
			modify(prob, "firstStrainCurCross", s1);
			modify(ie, "value", s1);
			halt();
		} else {
			backtrack();
		}
	}
}*/

/*rule Step3 {
	when {
		r: Relation r.subgoal === "Step3"; 
        MC: MCOptions MC.correctType == MCO.correctType; 
		ie: interfaceElement !ie.value;
	}
	then {
		if (checkSAI({selection: MC.name, action: "UpdateRadioButton", input: s1})) {
			modify(MC, "radio_button_1", s1);
            modify(ie,'value', s1);
			halt();
		} else {
			backtrack();
		}
	}
}*/
